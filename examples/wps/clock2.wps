% based on the PostScript example from
% http://oreilly.com/openbook/cgi/ch06_02.html

0 0 150 150 .gbox
0 150 translate
1 -1 scale

/max      150 def
/width    1.5 def
/marker   5 def
/origin   {0 0} def
/center   {max 2 div} bind def
/radius   /center load def
/hsegment 0.50 radius mul def
/msegment 0.80 radius mul def
/ssegment 0.90 radius mul def

/yellow {1 1 0 setrgbcolor} bind def
/red    {1 0 0 setrgbcolor} bind def
/green  {0 1 0 setrgbcolor} bind def
/blue   {0 0 1 setrgbcolor} bind def
/black  {0 0 0 setrgbcolor} bind def

/hangle {/$h load 60 mul /$m load add 2 div neg .deg2rad} bind def
/mangle {/$m load 6 mul neg .deg2rad} bind def
/sangle {/$s load 6 mul neg .deg2rad} bind def

/hand { % segment angle color width --
  origin moveto
  width mul setlinewidth
  load exec
  2 copy   cos mul
  3 1 roll sin mul
  lineto stroke
} bind def

/draw {
  /$h .date (getHours)   0 .call def
  /$m .date (getMinutes) 0 .call def
  /$s .date (getSeconds) 0 .call def
  gsave
  width setlinewidth
  black clippath fill % background
  center dup translate
  90 rotate
  gsave % markers
  12 {
    radius marker sub 0 moveto 
    marker 0 rlineto red stroke
    360 12 div rotate
  } repeat
  grestore
  newpath origin radius 0 360 arc blue stroke % circle
  hsegment hangle /green  2   hand % hour
  msegment mangle /green  1   hand % minute
  ssegment sangle /yellow 0.5 hand % second
  origin width 2 mul 0 360 arc red fill % dot
  grestore
} bind def

draw

/timer    false def
/go       {{draw} .callback 1000 .setInterval /timer exch def} bind def
/halt     {/timer load .clearTimeout /timer false def} bind def
/callback {/timer load type (booleantype) eq {go} {halt} ifelse} bind def

.gcanvas (onclick) /callback load .callback .hook
